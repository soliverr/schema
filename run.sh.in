#! /bin/bash
#
# Main run script
#

source @liblsb@/orabase-functions 2>&- || { echo "File @liblsb@/orabase-functions is not exists" >&2 ; exit 1; }

# Package identification ---------------------------------------------------------------
SECTION="@SECTION@"
PACKAGE_NAME="@PACKAGE_NAME@"
PACKAGE_VERSION="@PACKAGE_VERSION@"
PACKAGE_STRING="@PACKAGE_STRING@"

# Base directories ---------------------------------------------------------------------
prefix=@prefix@
exec_prefix=@exec_prefix@
liblsb=@liblsb@
libdir=@libdir@
libexecdir=@libexecdir@
sysconfdir=@sysconfdir@
confdir=@confdir@
localstatedir=@localstatedir@
datarootdir=@datarootdir@
datadir=@datadir@
logdir=@logdir@
config=$confdir/${PACKAGE_NAME}.conf

# Operational variables ----------------------------------------------------------------
EXE_NAME=`basename $0`
# Names to process
NAMES=
# Additional arguments
addargs=
# Logdir
LOGDIR=
#
SQL_FILE_NAME=

# Default values -----------------------------------------------------------------------
DEFAULT_NAMES='all'

# Read config file ---------------------------------------------------------------------
[ -r $config ] && source $config

# Global variables ---------------------------------------------------------------------
#
export liblsb libdir libexecdir datadir sysconfdir confdir logdir prefix config
export SQL_FILE EXE_NAME NAMES PACKAGE_NAME

usage() {
  cat << __EOFF__

$0: [options] [name,name,...]
 OPTIONS
    --no-public-grants
    --no-system-triggers
    name - Name of role,user,tablespace, etc.
           Default "ALL" - to process all scripts.
__EOFF__
}


# Main programm ========================================================================

TEMP=`getopt -o h --long help,no-public-grants,no-system-triggers \
             -n "$EXE_NAME" -- "$@"`

eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) usage; exit 0 ;;
        --no-public-grants|--no-system-triggers) addargs="$1"; shift ;;
        --) shift ; break ;;
        *) orabase_error_exit "Internal error!" ;;
    esac
done

NAMES="$@"

# Set default values
NAMES=${NAMES-$DEFAULT_NAMES}

#
# Set output file
#
if [ -n "$LOGDIR" ] ; then
    SQL_FILE_NAME="$LOGDIR/$EXE_NAME.`date +%s`"
fi

if [ -n "$SQL_FILE" ] ; then
  sqlfile="tee --append $SQL_FILE_NAME"
else
  sqlfile="cat"
fi

SQL_FILE="$sqlfile"

cat << __EOF__ | $sqlfile
set time on
set verify off

__EOF__


case "$EXE_NAME" in
    *$SECTION_$PACKAGE_NAME-drop-roles-users )   $libexecdir/real_drop_roles.sh
                                                 $libexecdir/real_drop_users.sh $addargs               ;;
    *$SECTION_$PACKAGE_NAME-drop-roles)          $libexecdir/real_drop_roles.sh "$NAMES"               ;;
    *$SECTION_$PACKAGE_NAME-drop-users)          $libexecdir/real_drop_users.sh $addargs "$NAMES"      ;;
    *$SECTION_$PACKAGE_NAME-drop-tbsps)          $libexecdir/real_drop_tbsps.sh "$NAMES"               ;;
    *$SECTION_$PACKAGE_NAME-drop-profiles)       $libexecdir/real_drop_profiles.sh "$NAMES"            ;;
    *$SECTION_$PACKAGE_NAME-drop-procedures)     $libexecdir/real_drop_procedures.sh "$NAMES"          ;;
    *$SECTION_$PACKAGE_NAME-drop-triggers)       $libexecdir/real_drop_triggers.sh $addargs "$NAMES"   ;;
    *$SECTION_$PACKAGE_NAME-drop-directories)    $libexecdir/real_drop_directories.sh "$NAMES"         ;;
    *$SECTION_$PACKAGE_NAME-drop-all)            $libexecdir/real_drop_roles.sh
                                                 $libexecdir/real_drop_profiles.sh
                                                 $libexecdir/real_drop_triggers.sh $addargs
                                                 $libexecdir/real_drop_directories.sh
                                                 $libexecdir/real_drop_users.sh $addargs
                                                 $libexecdir/real_drop_tbsps.sh                        ;;
    *$SECTION_$PACKAGE_NAME-create-roles-users ) $libexecdir/real_create_roles.sh
                                                 $libexecdir/real_create_users.sh $addargs             ;;
    *$SECTION_$PACKAGE_NAME-create-users )       $libexecdir/real_create_users.sh $addargs "$NAMES"    ;;
    *$SECTION_$PACKAGE_NAME-create-roles)        $libexecdir/real_create_roles.sh "$NAMES"             ;;
    *$SECTION_$PACKAGE_NAME-create-tbsps)        $libexecdir/real_create_tbsps.sh "$NAMES"             ;;
    *$SECTION_$PACKAGE_NAME-create-profiles)     $libexecdir/real_create_profiles.sh "$NAMES"          ;;
    *$SECTION_$PACKAGE_NAME-create-procedures)   $libexecdir/real_create_procedures.sh "$NAMES"        ;;
    *$SECTION_$PACKAGE_NAME-create-triggers)     $libexecdir/real_create_triggers.sh $addargs "$NAMES" ;;
    *$SECTION_$PACKAGE_NAME-create-directories)  $libexecdir/real_create_directories.sh "$NAMES"       ;;
    *$SECTION_$PACKAGE_NAME-create-all)          $libexecdir/real_create_tbsps.sh
                                                 $libexecdir/real_create_roles.sh
                                                 $libexecdir/real_create_profiles.sh
                                                 $libexecdir/real_create_procedures.sh
                                                 $libexecdir/real_create_triggers.shm $addargs
                                                 $libexecdir/real_create_directories.sh
                                                 $libexecdir/real_create_users.sh $addargs             ;;
esac

echo | $sqlfile
echo "exit;" | $sqlfile

if [ -f "$SQL_FILE_NAME" ] ; then
    orabase_info "DDLs are saved in file $SQL_FILE_NAME"
fi

exit 0
